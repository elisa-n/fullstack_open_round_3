{"version":3,"sources":["Filter.js","PersonForm.js","Numbers.js","Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","newFilter","onChange","value","PersonForm","newName","onChangeName","newNumber","onChangeNumber","handleSubmit","onSubmit","type","Numbers","persons","onClickDelete","map","person","key","name","number","onClick","Notification","notification","className","classification","message","baseUrl","axios","get","newPerson","post","id","delete","newObject","put","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","filteredPersons","setFilteredPersons","setNotification","useEffect","personService","then","response","data","toggleNotification","setTimeout","handleUpdate","updatedPerson","catch","e","newPersons","filter","p","concat","event","target","toLowerCase","filteredPeople","includes","preventDefault","window","confirm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d01aff5.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({newFilter, onChange}) => {\n    return(\n    <p>filter shown with:\n      <input\n        value={newFilter}\n        onChange={onChange}\n        />\n    </p>\n    )\n}\n\nexport default Filter;","import React from 'react'\n\nconst PersonForm = ({ newName, onChangeName, newNumber, onChangeNumber, handleSubmit }) => {\n  return(\n    <form onSubmit={handleSubmit}>\n      <div>\n        name: \n        <input \n          value={newName}\n          onChange={onChangeName} />\n      </div>\n      <div>\n        number:\n        <input\n          value={newNumber}\n          onChange={onChangeNumber} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm;","import React from 'react'\n\nconst Numbers = ({persons, onClickDelete}) => {\n  return(\n    <div>\n      {persons.map(person => \n        <p key={person.name}>{person.name} {person.number} \n        <button onClick={() => onClickDelete(person)}>delete</button></p>\n      )}\n    </div>\n  );\n}\n\nexport default Numbers;","import React from 'react'\n\nconst Notification = ({notification}) => {\n  if(notification === null) {\n    return null\n    } else {\n    return (\n      <div className={notification.classification}>\n        {notification.message}\n      </div>\n    )\n  }\n}\n\nexport default Notification;","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\n\nconst getAll = () => axios.get(baseUrl)\n\nconst create = newPerson => axios.post(baseUrl, newPerson)\n\nconst deletePerson = id => axios.delete(`${baseUrl}/${id}`)\n\nconst updatePerson = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject)\n\n\nexport default {\n  getAll: getAll,\n  create: create,\n  deletePerson: deletePerson,\n  updatePerson: updatePerson\n}","import React, { useState, useEffect } from 'react'\n\nimport Filter from './Filter'\nimport PersonForm from './PersonForm'\nimport Numbers from './Numbers'\nimport Notification from './Notification'\n\nimport personService from './services/persons'\n\nimport './styles.css'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ filteredPersons, setFilteredPersons ] = useState(persons)\n  const [ notification, setNotification] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data);\n        setFilteredPersons(response.data);\n      })\n  }, [])\n\n  const handleNameChange = (event) => setNewName(event.target.value);\n  const handleNumberChange = (event) => setNewNumber(event.target.value);\n\n  const handleFilterChange = (event) => {\n    const filter = event.target.value.toLowerCase();\n    const filteredPeople = \n      persons.filter(person => person.name.toLowerCase().includes(filter))\n\n    setNewFilter(filter);\n    setFilteredPersons(filteredPeople);\n  }\n\n  const toggleNotification = (message, classification) => {\n    setNotification({message: message, classification: classification})\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const names = persons.map(person => person.name.toLowerCase());\n    \n    if(names.includes(newName.toLowerCase())) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n        const person = persons.filter(p => p.name === newName)[0]\n        const updatedPerson = {name: person.name, number: newNumber}\n        handleUpdate(person.id, updatedPerson)\n      };\n    } else {\n      const newPerson = {name: newName, number: newNumber}\n      const newPersons = persons.concat(newPerson)\n      \n      personService\n        .create(newPerson)\n        .catch(e => toggleNotification(`${e}`, 'error'))\n\n      setPersons(newPersons);\n      setFilteredPersons(newPersons);\n      toggleNotification(`${newName} added`, 'success')\n    }\n  \n    setNewNumber('');\n    setNewName('');\n  }\n\n  const handleUpdate = (id, updatedPerson) => {\n    personService\n      .updatePerson(id, updatedPerson)\n      .then(response => toggleNotification(`${updatedPerson.name} number updated`, 'success'))\n      .catch(e => toggleNotification(`${updatedPerson.name}`, 'was already deleted from server'))\n\n    const newPersons = persons.filter(p => p.name !== updatedPerson.name)\n                              .concat(updatedPerson)\n    setPersons(newPersons)\n    setFilteredPersons(newPersons)\n  }\n\n  const handleDelete = (person) => {\n    if (window.confirm(`Delete ${person.name} ?`)) {\n      const newPersons = persons.filter(p => p !== person )\n      setPersons(newPersons)\n      setFilteredPersons(newPersons)\n\n      personService\n        .deletePerson(person.id)\n        .then(() =>\n          toggleNotification(`${person.name} successfully deleted`, 'success')\n        )\n        .catch(e => toggleNotification(`${e}`, 'error'))\n    } \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification \n        notification={notification} />\n        <Filter value={newFilter} onChange={handleFilterChange} />\n      <h2>add a new</h2>\n        <PersonForm \n          newName={newName}\n          onChangeName={handleNameChange}\n          newNumber={newNumber}\n          onChangeNumber={handleNumberChange}\n          handleSubmit={handleSubmit} />\n      <h2>Numbers</h2>\n        <Numbers persons={filteredPersons} onClickDelete={handleDelete} />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}